name: 🚀 CI/CD Pipeline - Authentication Service

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '22.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================
  # ANÁLISE DE CÓDIGO
  # ========================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 ESLint check
        run: npx eslint src/ tests/ --ext .js --format stylish
        continue-on-error: true

      - name: 🔒 Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 📊 Dependency check
        run: npx audit-ci --config .audit-ci.json
        continue-on-error: true

  # ========================
  # TESTES AUTOMATIZADOS
  # ========================
  tests:
    name: 🧪 Automated Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-type: [unit-fast, integration]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup test environment
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-secret-ci-cd" >> $GITHUB_ENV
          echo "JWT_EXPIRES=1h" >> $GITHUB_ENV

      - name: 🧪 Run unit tests (fast)
        if: matrix.test-type == 'unit-fast'
        run: |
          npm run test:unit:fast
          echo "✅ Unit tests completed successfully"

      - name: 🔗 Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          npm run test:integration:app
          echo "✅ Integration tests completed successfully"

      - name: 📊 Generate coverage report
        if: matrix.test-type == 'unit-fast'
        run: npm run test:coverage:fast

      - name: 📤 Upload coverage to Codecov
        if: matrix.test-type == 'unit-fast'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ========================
  # BUILD & DOCKER
  # ========================
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: tests
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --only=production

      - name: 🏗️ Build application
        run: |
          echo "Building application..."
          # Aqui você pode adicionar steps de build se necessário
          echo "✅ Build completed"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================
  # SECURITY SCANNING
  # ========================
  security:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================
  # DEPLOY STAGING
  # ========================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ needs.build.outputs.image-url }}"
          # Aqui você adicionaria os comandos específicos do seu ambiente
          # Exemplos:
          # - kubectl apply -f k8s/staging/
          # - docker-compose up -d
          # - aws ecs update-service
          echo "✅ Deployment to staging completed"

      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Adicionar smoke tests específicos
          sleep 30 # Aguardar startup
          # curl -f https://staging.your-domain.com/health
          echo "✅ Smoke tests passed"

  # ========================
  # DEPLOY PRODUCTION
  # ========================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔄 Blue-Green Deployment
        run: |
          echo "🔄 Starting blue-green deployment to production..."
          echo "Image: ${{ needs.build.outputs.image-url }}"
          # Implementar blue-green deployment
          echo "✅ Production deployment completed"

      - name: 🧪 Run production health checks
        run: |
          echo "🧪 Running production health checks..."
          # Adicionar health checks específicos
          sleep 60 # Aguardar startup completo
          echo "✅ Production health checks passed"

      - name: 📊 Update deployment metrics
        run: |
          echo "📊 Updating deployment metrics..."
          # Enviar métricas para observabilidade
          echo "✅ Metrics updated"

  # ========================
  # NOTIFICAÇÕES
  # ========================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📢 Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          title: 'Authentication Service Deployment'
          text: |
            🚀 Deployment Status: ${{ job.status }}
            📦 Branch: ${{ github.ref_name }}
            👤 Author: ${{ github.actor }}
            🔗 Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
